package topcoder;
import java.util.HashSet;


public class Decipherability {

	public static void main(String[] args) {
		Decipherability d = new Decipherability();
		
		String[] words = new String[] { "snuke", "aba", "aba", "abcdabcd", "koukyoukoukokukikou", "wolfsothe", "aa" };
		int[] Ks = new int[] { 2, 1, 2, 3, 2, 8, 2 };
		
		for (int i = 0; i < words.length; i++) 
			System.out.println(d.check(words[i], Ks[i]));
		
		
		System.out.println("deletePositions(ABCDEFGHIJ, {1,4,7,8}): " + d.deletePositions("ABCDEFGHIJ", new int[] {1,4,7,8}));
	}
	
	public String check(String s, int K) {
		boolean certain = check(s, K, 0, new int[K], 0, new HashSet<String>());
		
		return certain ? "Certain" : "Uncertain";
	}

	private boolean check(String s, int k, int start, int[] delete, int deleteIndex, HashSet<String> words) {
		if (deleteIndex == k) { // formed a unique set of k positions to delete on string s 
			String word = deletePositions(s, delete); // deletes positions from s and returns new word generated.
			
			if (words.add(word)) // adds word to a set. The set makes it easier to check
				return true; 
			else
				return false; // UNCERTAIN found!!! word was previously generated by removing another set of characters... 				
		}
		
		boolean certain = true;
		
		for (int i = start, maxi = s.length() - k + deleteIndex + 1; i < maxi && certain; i++) {
			delete[deleteIndex] = i;
			
			certain = check(s, k, i + 1, delete, deleteIndex + 1, words);
		}
		
		return certain;
	}

	public String deletePositions(String s, int[] delete) {
		char[] result = new char[s.length() - delete.length];

		for (int i = 0, d = 0, j = 0; i < s.length(); i++)
			if (d < delete.length && i == delete[d]) {
				d++;
			}
			else {
				result[j++] = s.charAt(i);
			}
		
		return new String(result);
	}
}
